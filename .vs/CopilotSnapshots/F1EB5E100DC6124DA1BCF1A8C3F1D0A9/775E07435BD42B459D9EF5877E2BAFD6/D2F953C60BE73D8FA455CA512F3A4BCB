using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace QuanLiNhaThuoc
{
    public partial class Form1 : DevExpress.XtraEditors.XtraForm
    {
 

        public Form1()
        {
            InitializeComponent();
            this.Load += Form1_Load;
            this.Load += FormDashboard_Load;
            CapNhatBieuDoThuocDaBan();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            timerClock.Tick += timerClock_Tick;
            timerClock.Interval = 1000; // 1 giây
            timerClock.Start();
        }

        private void timerClock_Tick(object sender, EventArgs e)
        {
            lblTime.Text = DateTime.Now.ToString("HH:mm:ss");
            lblDate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        }

        private void FormDashboard_Load(object sender, EventArgs e)
        {
            using (var db = new DatabaseHelper())
            {
                // 1. Doanh thu hôm nay
                string queryDoanhThu = $@"SELECT ISNULL(SUM(TongTien), 0) AS DoanhThu FROM HoaDon     WHERE CAST(NgayBan AS DATE) = '2024-06-01'";
                var dtDoanhThu = db.ExecuteQuery(queryDoanhThu);
                lblDoanhThuHomNay.Text = string.Format("{0:N0} đ", dtDoanhThu.Rows[0][0]);

                // 2. Số lượng thuốc sắp hết (ví dụ: SoLuongTon <= 10)
                string querySapHet = "SELECT COUNT(*) AS SoLuongThuocSapHet FROM Thuoc WHERE SoLuongTon <= 50";
                var dtSapHet = db.ExecuteQuery(querySapHet);
                lblThuocSapHet.Text = dtSapHet.Rows[0][0].ToString();

                // 3. Số loại thuốc sắp hết hạn (trong 30 ngày tới)
                string querySapHetHan = @"SELECT COUNT(DISTINCT MaThuoc) FROM ChiTietPhieuNhap WHERE HanSuDung <= DATEADD(day, 30, GETDATE()) AND HanSuDung >= GETDATE()";
                var dtSapHetHan = db.ExecuteQuery(querySapHetHan);
                lblThuocSapHetHan.Text = dtSapHetHan.Rows[0][0].ToString();

                // 4. Hóa đơn gần nhất
                string queryHD = @"SELECT TOP 1 h.MaHoaDon, k.HoTenKH, h.NgayBan FROM HoaDon h JOIN KhachHang k ON h.MaKhachHang = k.MaKhachHang ORDER BY h.NgayBan DESC, h.MaHoaDon DESC";
                var dtHD = db.ExecuteQuery(queryHD);
                if (dtHD.Rows.Count > 0)
                {
                    var row = dtHD.Rows[0];
                    lblHoaDon.Text = $"HD: {row[0]} - {row[1]} - {Convert.ToDateTime(row[2]):dd/MM/yyyy}";
                }
                else
                {
                    lblHoaDon.Text = "Không có hóa đơn";
                }
            }
        }
        private void CapNhatBieuDoThuocDaBan()
        {
            DateTime fromDate = new DateTime(2024, 6, 1);
            DateTime toDate = new DateTime(2024, 6, 30);

            string query = @"
                SELECT t.TenThuoc, SUM(cthd.SoLuong) AS SoLuongBan
                FROM HoaDon h
                JOIN ChiTietHoaDon cthd ON h.MaHoaDon = cthd.MaHoaDon
                JOIN Thuoc t ON cthd.MaThuoc = t.MaThuoc
                WHERE h.NgayBan >= @fromDate AND h.NgayBan <= @toDate
                GROUP BY t.TenThuoc
                ORDER BY SoLuongBan DESC
            ";

            DataTable dt = new DataTable();
            using (var db = new DatabaseHelper())
            {
                using (var cmd = db.GetCommand(query))
                {
                    cmd.Parameters.Add("@fromDate", System.Data.SqlDbType.Date).Value = fromDate;
                    cmd.Parameters.Add("@toDate", System.Data.SqlDbType.Date).Value = toDate;
                    db.OpenConnection();
                    using (var adapter = new System.Data.SqlClient.SqlDataAdapter(cmd))
                    {
                        adapter.Fill(dt);
                    }
                    db.CloseConnection();
                }
            }

            // Gán dữ liệu vào series đầu tiên của chartThuocDaBan (kiểu Pie)
            if (chartThuocDaBan.Series.Count > 0)
            {
                var series = chartThuocDaBan.Series[0];
                series.Points.Clear();
                foreach (DataRow row in dt.Rows)
                {
                    string tenThuoc = row["TenThuoc"].ToString();
                    int soLuong = row["SoLuongBan"] != DBNull.Value ? Convert.ToInt32(row["SoLuongBan"]) : 0;
                    var point = new DevExpress.XtraCharts.SeriesPoint(tenThuoc, soLuong);
                    // Hiển thị tên thuốc khi hover
                    point.ToolTipHint = tenThuoc;
                    series.Points.Add(point);
                }
                // Hiển thị tên thuốc trên legend và tooltip
                series.LegendTextPattern = "{A}";
                series.ToolTipPointPattern = "{A}: {V} viên";
            }
        }

        private void LoadThuocSapHetHang()
        {
            string query = @"
                SELECT MaThuoc, TenThuoc, LoaiThuoc, DonViTinh, SoLuongTon
                FROM Thuoc
                WHERE SoLuongTon <= 50
                ORDER BY SoLuongTon ASC
            ";
            DataTable dt = new DataTable();
            using (var db = new DatabaseHelper())
            {
                dt = db.ExecuteQuery(query);
            }
            dgvThuoc.DataSource = dt;
        }
    }
}
